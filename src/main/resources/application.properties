##
# CAS Server Context Configuration
#
# 默认主题 apereo/iframe
cas.theme.defaultThemeName=apereo

#需要配置 server name的信息，不然就会跑到 https://cas.example.org:8443
cas.server.name=http://126.33.10.60:8080
cas.server.prefix=${cas.server.name}/cas

server.context-path=/cas
server.port=8443

server.ssl.key-store=file:/etc/cas/thekeystore
server.ssl.key-store-password=changeit
server.ssl.key-password=changeit

server.max-http-header-size=2097152
server.use-forward-headers=true
server.connection-timeout=20000
server.error.include-stacktrace=ALWAYS

server.compression.enabled=true
server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain

server.tomcat.max-http-post-size=2097152
server.tomcat.basedir=build/tomcat
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.accesslog.suffix=.log
server.tomcat.min-spare-threads=10
server.tomcat.max-threads=200
server.tomcat.port-header=X-Forwarded-Port
server.tomcat.protocol-header=X-Forwarded-Proto
server.tomcat.protocol-header-https-value=https
server.tomcat.remote-ip-header=X-FORWARDED-FOR
server.tomcat.uri-encoding=UTF-8

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

##
# CAS Cloud Bus Configuration
#
spring.cloud.bus.enabled=false

# Indicates that systemPropertiesOverride can be used.
# Set to false to prevent users from changing the default accidentally. Default true.
spring.cloud.config.allow-override=true

# External properties should override system properties.
spring.cloud.config.override-system-properties=false

# When allowOverride is true, external properties should take lowest priority, and not override any
# existing property sources (including local config files).
spring.cloud.config.override-none=false

# spring.cloud.bus.refresh.enabled=true
# spring.cloud.bus.env.enabled=true
# spring.cloud.bus.destination=CasCloudBus
# spring.cloud.bus.ack.enabled=true

endpoints.enabled=false
endpoints.sensitive=true

endpoints.restart.enabled=false
endpoints.shutdown.enabled=false

# Control the security of the management/actuator endpoints
# The 'enabled' flag below here controls the rendering of details for the health endpoint amongst other things.
management.security.enabled=true
management.security.roles=ACTUATOR,ADMIN
management.security.sessions=if_required
management.context-path=/status
management.add-application-context-header=false

# Define a CAS-specific "WARN" status code and its order
management.health.status.order=WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP

# Control the security of the management/actuator endpoints
# With basic authentication, assuming Spring Security and/or relevant modules are on the classpath.
security.basic.authorize-mode=role
security.basic.path=/cas/status/**
# security.basic.enabled=true
# security.user.name=casuser
# security.user.password=

##
# CAS Web Application Session Configuration
#
#单位：秒
server.session.timeout=1800
server.session.cookie.http-only=false
server.session.tracking-modes=COOKIE

##
# CAS Thymeleaf View Configuration
#

spring.thymeleaf.encoding=UTF-8
#服务端的HTML页面使用的是thymeleaf编写（http://www.ultraq.net.nz/thymeleaf/layout）
#thymeleaf默认会在启动的时候就把页面的静态内容给放到缓存里，这给我修改CAS默认登录页带来了很大的麻烦，每次修改一点点页面内容，
# 刷新是看不到效果的，只得重启服务，为了方便开发，把这个配置设成false，就是说不要缓存。
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
spring.thymeleaf.template-resolver-order=100
##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS AspectJ Configuration
#
spring.aop.auto=true
spring.aop.proxy-target-class=true


#cas.tgc.path=
#cas.tgc.maxAge=-1
#cas.tgc.domain=
#cas.tgc.name=TGC
cas.tgc.secure=false
#设置客户端可获取cookie
cas.tgc.httpOnly=false
#cas.tgc.rememberMeMaxAge=1209600
#cas.tgc.encryptionKey=
#cas.tgc.signingKey=
#cas.tgc.cipherEnabled=true
#表示不对TGC进行加密，默认是true，TGC其实就是TGT经过JWT加密后的值而已（浏览器debug可见）
cas.tgc.crypto.enabled=false

cas.ticket.tgt.rememberMe.enabled=true
#八小时失效
cas.ticket.tgt.rememberMe.timeToKillInSeconds=28800
#应用于TGTS的过期策略提供了最近使用的过期策略，类似于Web服务器会话超时。（用户活跃TGT的更新,慎用redis报错）
#cas.ticket.tgt.timeout.maxTimeToLiveInSeconds=28800
# Set to a negative value to never expire tickets
#指定Session的最大有效时间,即从生成到指定时间后就将超时,默认28800s,即8小时
cas.ticket.tgt.maxTimeToLiveInSeconds=28800
#指定用户操作的超时时间,即用户在多久不操作后就超时,默认7200s,即2小时
#经测：在测试tgt.timeToKillInSeconds时还要注意客户端web.xml配置的超时时间
#即只有客户端配置超时时间不大于tgt.timeToKillInSeconds时才能看见服务端设置的效果
cas.ticket.tgt.timeToKillInSeconds=7200
#硬超时策略提供从创建时测量的有限票生命周期。
# cas.ticket.tgt.hardTimeout.timeToKillInSeconds=28800

#解决未认证授权服务问题 开启识别json文件，默认false
cas.serviceRegistry.initFromJson=true
#自动扫描服务配置，默认开启
#cas.serviceRegistry.watcherEnabled=true
#120秒扫描一遍
#cas.serviceRegistry.repeatInterval=120000
#延迟15秒开启
#cas.serviceRegistry.startDelay=15000
#默认json/yml资源加载路径为resources/services
#cas.serviceRegistry.config.location=classpath:/services

#是否允许客户端Logout后重定向到service参数指定的资源
#跳转的url也必须在services注册过
cas.logout.followServiceRedirects=true

#解决跨域问题
#取消x-frame-options为deny限制，允许外部项目使用iframe嵌入cas-server登录页面
cas.httpWebRequest.header.xframe=false
##
# CAS Authentication Credentials
#
#cas.authn.accept.users=casuser::Mellon

# 查询账号密码sql，必须包含密码字段
cas.authn.jdbc.query[0].sql=select * from userinfo where loginname=?
cas.authn.jdbc.query[0].fieldPassword=localpwd
cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.MySQLDialect
cas.authn.jdbc.query[0].driverClass=com.mysql.jdbc.Driver
#cas.authn.jdbc.query[0].url=jdbc:mysql://10.20.36.84:3306/zjdzywcs?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
cas.authn.jdbc.query[0].url=jdbc:mysql://112.124.113.167:3306/zjdzyjzs_test?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&useSSL=false
cas.authn.jdbc.query[0].user=root
#cas.authn.jdbc.query[0].password=zjasm123
cas.authn.jdbc.query[0].password=zjasmssj@)!%
cas.authn.jdbc.query[1].sql=select t.site_name,t.site_domain from tb_sub_site t,sub_site_user_rel s,userinfo u where t.id=s.siteId and s.userId=u.userid and lower(u.loginname) = lower(?)

#----------------------单列值情况----------------------------
#定义三个属性的单列,下面这里为配置要返回的信息，要返回的信息为userid，loginname
cas.authn.attributeRepository.jdbc[0].attributes.userid=userid
cas.authn.attributeRepository.jdbc[0].attributes.loginname=loginname
cas.authn.attributeRepository.jdbc[0].attributes.userarea=userarea
cas.authn.attributeRepository.jdbc[0].attributes.userorg=userorg
cas.authn.attributeRepository.jdbc[0].singleRow=true
cas.authn.attributeRepository.jdbc[0].order=0
cas.authn.attributeRepository.jdbc[0].url=${cas.authn.jdbc.query[0].url}
# 以下属性为查询sql时，当为多个时逗号分隔，如填写username、email,sql会变成 select * from sys_user where username=${?} {and/or} email=${?}
cas.authn.attributeRepository.jdbc[0].username=loginname
cas.authn.attributeRepository.jdbc[0].user=${cas.authn.jdbc.query[0].user}
cas.authn.attributeRepository.jdbc[0].password=${cas.authn.jdbc.query[0].password}
cas.authn.attributeRepository.jdbc[0].sql=select * from userinfo where {0}
cas.authn.attributeRepository.jdbc[0].dialect=${cas.authn.jdbc.query[0].dialect}
cas.authn.attributeRepository.jdbc[0].ddlAuto=none
cas.authn.attributeRepository.jdbc[0].driverClass=${cas.authn.jdbc.query[0].driverClass}
cas.authn.attributeRepository.jdbc[0].leakThreshold=10
cas.authn.attributeRepository.jdbc[0].batchSize=1

#----------------------多列值情况start----------------------------
#多列值映射的情况，一个用户有多列值的情况
#多行(多个值的情况，我们需要做成key -val的形式，一个key 可以对应多个字段)
cas.authn.attributeRepository.jdbc[1].attributes.role=role_multi
cas.authn.attributeRepository.jdbc[1].attributes.authsys=authsys_multi
#键值对（指定 key 和 val的字段）
cas.authn.attributeRepository.jdbc[1].columnMappings.ATTR_KEY=ATTR_VAL
#多行
cas.authn.attributeRepository.jdbc[1].singleRow=false
cas.authn.attributeRepository.jdbc[1].order=1
#数据库地址
cas.authn.attributeRepository.jdbc[1].url=${cas.authn.jdbc.query[0].url}
#数据库查询的字段
cas.authn.attributeRepository.jdbc[1].username=username
#数据库连接 用户名
cas.authn.attributeRepository.jdbc[1].user=${cas.authn.jdbc.query[0].user}
#数据库连接 密码
cas.authn.attributeRepository.jdbc[1].password=${cas.authn.jdbc.query[0].password}
#查询多属性的sql, 和 刚刚的username 拼接
#select r.UserID,r.RoleID,s.Rolename,u.loginname from role_user_ref r,s_roleinfo s,userinfo u where r.RoleID=s.roleid and r.UserID=u.userid and u.loginname='fbdw'
#CREATE VIEW v_user_role_authsys AS
#SELECT u.loginname  AS 'USERNAME',
#-- 角色
#'role' AS 'ATTR_KEY' ,CONCAT(r.RoleID,'#',s.Rolename) AS 'ATTR_VAL'
#FROM role_user_ref r,s_roleinfo s,userinfo u WHERE r.RoleID=s.roleid and r.UserID=u.userid
#UNION
#SELECT u.loginname  AS 'USERNAME',
#-- 权限系统
#'authsys' AS 'ATTR_KEY' ,t.SITE_DOMAIN AS 'ATTR_VAL'
#FROM sub_site_user_rel r,tb_sub_site t,userinfo u WHERE r.siteId=t.ID and r.userId=u.userid
cas.authn.attributeRepository.jdbc[1].sql=select * from v_user_role_authsys where {0}
cas.authn.attributeRepository.jdbc[1].dialect=${cas.authn.jdbc.query[0].dialect}
#create-drop
cas.authn.attributeRepository.jdbc[1].ddlAuto=none
cas.authn.attributeRepository.jdbc[1].driverClass=${cas.authn.jdbc.query[0].driverClass}
cas.authn.attributeRepository.jdbc[1].leakThreshold=10
#cas.authn.attributeRepository.jdbc[1].propagationBehaviorName=PROPAGATION_REQUIRED
cas.authn.attributeRepository.jdbc[1].batchSize=1
#cas.authn.attributeRepository.jdbc[1].failFastTimeout=1
#cas.authn.attributeRepository.jdbc[1].failFast=true
#----------------------多列值情况end----------------------------

#？？？？？？？？？？？？？？？？？？？？？多属性返回无法更新，只能重启,以下配置可解决？？？？？？？？？？？？？？？？？？？
#https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html#authentication-attributes
cas.authn.attributeRepository.expirationTime=3
cas.authn.attributeRepository.expirationTimeUnit=SECONDS
cas.authn.attributeRepository.maximumCacheSize=10000
cas.authn.attributeRepository.merger=REPLACE

#默认加密策略，通过encodingAlgorithm来指定算法，默认NONE不加密
cas.authn.jdbc.query[0].passwordEncoder.type=DEFAULT
#默认加密策略，通过encodingAlgorithm来指定算法，默认NONE不加密
#cas.authn.jdbc.query[0].passwordEncoder.type=com.zjasm.cas.CustomPasswordEncoder
cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8
cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=MD5

##
# redis配置，将ticket票据存在redis中，默认在内存里
#
#redis的服务器地址
cas.ticket.registry.redis.host=127.0.0.1
cas.ticket.registry.redis.password=123456
#选择第二个redis数据库，默认16个，0开始
cas.ticket.registry.redis.database=1
cas.ticket.registry.redis.port=6379
#超时设置
cas.ticket.registry.redis.timeout=2000
cas.ticket.registry.redis.useSsl=false
#不设置redis线程池
cas.ticket.registry.redis.usePool=false

# 开启rest验证并配置url
cas.authn.rest.uri=http://126.33.10.60:8080/cas/v1
# ticket过期设置
cas.ticket.st.numberOfUses=1
#指定service ticket的有效时间,默认10s
#这也是debug追踪CAS应用认证过程中经常会失败的原因,因为追踪的时候service ticket已经过了10秒有效期了
cas.ticket.st.timeToKillInSeconds=1800

#captcha 验证码
#cas.googleRecaptcha.verifyUrl=https://www.google.com/recaptcha/api/siteverify
#cas.googleRecaptcha.verifyUrl=https://recaptcha.net/recaptcha/api/siteverify
#cas.googleRecaptcha.siteKey=6LcQlG8UAAAAAFBLScSxvrJHvqKx7pRik_8R_6gO
#cas.googleRecaptcha.secret=6LcQlG8UAAAAAO2LshgL4lhimzO5I3I0lmctt48-
#自定义错误信息
cas.authn.exceptions.exceptions=com.zjasm.exception.NoAuthException,com.zjasm.exception.InvalidCaptchaException,com.zjasm.exception.InvalidPasswordException,com.zjasm.exception.NoUserException
#----------------------oauth2.0start----------------------------
cas.authn.oauth.refreshToken.timeToKillInSeconds=2592000
cas.authn.oauth.code.timeToKillInSeconds=300
cas.authn.oauth.code.numberOfUses=1
cas.authn.oauth.accessToken.releaseProtocolAttributes=true
cas.authn.oauth.accessToken.timeToKillInSeconds=7200
cas.authn.oauth.accessToken.maxTimeToLiveInSeconds=28800
cas.authn.oauth.grants.resourceOwner.requireServiceHeader=true
cas.authn.oauth.userProfileViewType=NESTED
#----------------------oauth2.0end----------------------------
#----------------------services入库start----------------------------
#启动观察器，重复间隔，延迟
#cas.serviceRegistry.watcherEnabled=true
#cas.serviceRegistry.repeatInterval=120000
#cas.serviceRegistry.startDelay=15000
#设置配置的服务，一直都有，不会给清除掉 ， 第一次使用，需要配置为 create-drop
#create-drop 重启cas服务的时候，就会给干掉
#create  没有表就创建，有就不创建
#none 一直都有
#update 更新
cas.serviceRegistry.jpa.ddlAuto=create-drop
#配置将service配置到数据库中
cas.serviceRegistry.jpa.isolateInternalQueries=false
cas.serviceRegistry.jpa.url=${cas.authn.jdbc.query[0].url}
cas.serviceRegistry.jpa.user=${cas.authn.jdbc.query[0].user}
cas.serviceRegistry.jpa.password=${cas.authn.jdbc.query[0].password}
#这个必须是org.hibernate.dialect.MySQL5Dialect ,否则导致表创建失败
cas.serviceRegistry.jpa.dialect=org.hibernate.dialect.MySQL5Dialect
cas.serviceRegistry.jpa.driverClass=${cas.authn.jdbc.query[0].driverClass}
cas.serviceRegistry.jpa.leakThreshold=10
cas.serviceRegistry.jpa.batchSize=1
#cas.serviceRegistry.jpa.failFast=true
cas.serviceRegistry.jpa.autocommit=true
cas.serviceRegistry.jpa.idleTimeout=5000
#连接池配置(报错)
#cas.serviceRegistry.jpa.pool.suspension=false
#cas.serviceRegistry.jpa.pool.minSize=6
#cas.serviceRegistry.jpa.pool.maxSize=18
#cas.serviceRegistry.jpa.pool.maxIdleTime=1000
#cas.serviceRegistry.jpa.pool.maxWait=2000
#----------------------services入库end----------------------------